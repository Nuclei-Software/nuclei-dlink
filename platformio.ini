; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter, extra scripting
;   Upload options: custom port, speed and extra flags
;   Library options: dependencies, extra library storages
;
; Please visit documentation for the other options and examples
; http://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = gd32vf103c-start
;default_envs = sipeed-longan-nano
;default_envs = sipeed-longan-nano-alt
;default_envs = rvl-probe

src_dir = .

[env]
platform = nuclei
framework = nuclei-sdk
board = gd32vf103c_longan_nano

; The target RV-Link is direcly connected to a host USB port

; Upload to the target RV-Link using USB DFU method of the built-in the bootloader
;upload_protocol = dfu

; Upload to the target RV-Link using the  stm32 (compatible) serial upload protocol of the built-in the bootloader
;upload_protocol = serial
;upload_port = /dev/ttyUSB0
;upload_speed = 115200

; Upload to the target RV-Link that is connected to another RV-Link
;upload_protocol = rv-link
;upload_port = /dev/serial/by-id/usb-RV-LINK_*-if00 ; aka /dev/ttyACM0
;debug_tool = rv-link
;debug_port = /dev/serial/by-id/usb-RV-LINK_*-if00 ; aka /dev/ttyACM0

; A serial monitor can be connected to a target USART e.g.:
; - USART0_NO_REMAP (TX0-PA9, RX0-PA10) of the JTAG header
; - USART2_NO_REMAP (TX2-B10, RX2-B11) of the pin header
monitor_speed = 115200

; Monitor a target RV-Link USART connected to a generic USB-to-serial adapter
;monitor_port = /dev/ttyUSB0

; Monitor a target RV-Link USART connected to a FTDI FT232R USB-to-serial adapter
;monitor_port = /dev/serial/by-id/usb-FTDI_FT232R_USB_UART_*-if00-port0 ;  aka /dev/ttyUSB0

; Monitor a target RV-Link USART connected to another RV-Link
;monitor_port = /dev/serial/by-id/usb-RV-LINK_*61-if02 ; aka /dev/ttyACM1

extra_scripts =
    pre:scripts/platformio_pre_build.py
    post:scripts/platformio_post_script.py
src_filter =
    -<.git/> -<.svn/> -<example/> -<examples/> -<test/> -<tests/>
    +<lib/>
    +<rv-link/>
    -<rv-link/link/arch/gd32vf103/>
    +<rv-link/link/arch/gd32vf103/*.c>
    +<rv-link/link/arch/gd32vf103/details/*.c>
build_flags =
    ; Add project include path specifically needed for the Nuclei SDK library
    -Irv-link/link/arch/gd32vf103/details
    ; Add include path of the external libraries
    -Ilib
    ; Common GD32VD103 target defines for RV-Link
    "-D__SYSTEM_CLOCK_96M_PLL_HXTAL=\(uint32_t\)\(96000000\)"
    "-DSYSTEM_CLOCK=__SYSTEM_CLOCK_96M_PLL_HXTAL"
    "-DUSE_STDPERIPH_DRIVER"
    "-DRVL_TARGET_GD32VF103"
    "-DRVL_DEBUG_EN"
    "-DRVL_ASSERT_EN"
    -MMD
    ; Save intermediate assembler output
    ;-save-temps=obj
    ;-fverbose-asm

[env:override_framework]
platform = nuclei
platform_packages =
  ; use upstream Git version
  framework-nuclei-sdk @ https://github.com/michahoiting/nuclei-sdk.git#develop

[env:gd32vf103c-start]
extends = env:override_framework
build_flags = ${env.build_flags}
    -DRVL_LINK_GD32VF103C_START
    -DRVL_SERIAL_USING_UART0_NO_REMAP
src_filter = ${env.src_filter}
    +<rv-link/link/arch/gd32vf103/gd32vf103c-start/>


[env:sipeed-longan-nano]
extends = env:override_framework
build_flags = ${env.build_flags}
    "-DRVL_LINK_LONGAN_NANO"
    "-DRVL_SERIAL_USING_UART0_NO_REMAP"
src_filter = ${env.src_filter}
    +<rv-link/link/arch/gd32vf103/longan-nano/>


[env:sipeed-longan-nano-alt]
extends = env:override_framework
build_flags = ${env.build_flags}
    "-DRVL_LINK_LONGAN_NANO_ALT"
    "-DRVL_SERIAL_USING_UART0_NO_REMAP"
src_filter = ${env.src_filter}
    +<rv-link/link/arch/gd32vf103/longan-nano-alt/>
    +<rv-link/link/arch/gd32vf103/longan-nano/led.c>


[env:rvl-probe]
extends = env:override_framework
build_flags = ${env.build_flags}
    "-DRVL_LINK_RVL_PROBE"
    "-DRVL_SERIAL_USING_UART2_NO_REMAP"
    "-DRVL_PROBE_LINK_CONFIG_SPI0_NO_REMAP"
src_filter = ${env.src_filter}
    +<rv-link/link/arch/gd32vf103/rvl-probe/>
